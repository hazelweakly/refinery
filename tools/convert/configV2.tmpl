{{ box "Honeycomb Refinery Configuration" }}
#
# created on {{ .Now }} from {{ .Input }}

# ConfigurationVersion specifies the file format of this particular configuration file.
ConfigurationVersion: 2

# MinRefineryVersion specifies the lowest Refinery version capable of loading all of the
# features used in this file. Refinery will refuse to start if its version is less than
# this.
MinRefineryVersion: "v2.0"

{{ box "Network" }}
# This section contains network addresses.
Network:

    # ListenAddr is the IP and port on which to listen for incoming events. Incoming
    # traffic is expected to be HTTP, so if using SSL put something like nginx in
    # front to do the decryption.
    {{ formatExample "ipport" 8080 }}
    {{ reload false }}
    {{ nonDefaultOnly .Data "ListenAddr" "0.0.0.0:8080" }}

    # GRPCListenAddr is the IP and port on which to listen for incoming events over
    # gRPC. Incoming traffic is expected to be unencrypted, so if using SSL put
    # something like nginx in front to do the decryption.
    {{ formatExample "ipport" 4317 }}
    {{ reload false }}
    {{ nonDefaultOnly .Data "GRPCListenAddr" "0.0.0.0:4317" }}

    # PeerListenAddr is the IP and port on which to listen for traffic being
    # rerouted from a peer. Peer traffic is expected to be HTTP, so if using SSL
    # put something like nginx in front to do the decryption. Must be different from
    # ListenAddr.
    {{ formatExample "ipport" 8081 }}
    {{ reload false }}
    {{ nonDefaultOnly .Data "PeerListenAddr" "0.0.0.0:8081" }}

    # CompressPeerCommunication determines whether refinery will compress span data
    # it forwards to peers. If it costs money to transmit data between refinery
    # instances (e.g. they're spread across AWS availability zones), then you
    # almost certainly want compression enabled to reduce your bill. The option to
    # disable itÂ is provided as an escape hatch for deployments that value lower CPU
    # utilization over data transfer costs.
    {{ reload false }}
    {{ nonDefaultOnly .Data "CompressPeerCommunication" true }}

{{ box "Keys" }}
# This section contains access keys.
Keys:

    # APIKeys is a list of exact Honeycomb API keys that the proxy will accept. This list
    # only applies to events - other Honeycomb API actions will fall through to the
    # upstream API directly.
    # Adding keys here causes events arriving with API keys not in this list to be
    # rejected with an HTTP 401 error. If an API key that is a literal '*' is in the
    # list, all API keys are accepted.
    {{ stringArray .Data "APIKeys" 6 "*" }}

{{ box "Destinations" }}
# This section contains the destinations to which data will be sent.
Destinations:

    # HoneycombAPI is the URL for the upstream Honeycomb API; this is the destination to which
    # refinery sends all events that it decides to keep.
    {{ reload true }}
    {{ nonDefaultOnly .Data "HoneycombAPI" "https://api.honeycomb.io" }}

{{ box "Telemetry" }}
# This section contains configuration info for the telemetry that Refinery uses to record its own operation.
Telemetry:

    # AddRuleReasonToTrace causes traces that are sent to Honeycomb to include the field `meta.refinery.reason`.
    # This field contains text indicating which rule was evaluated that caused the trace to be included.
    {{ reload true }}
    {{ nonDefaultOnly .Data "AddRuleReasonToTrace" true }}

{{ box "Traces" }}
# This section contains configuration for how traces are managed.
Traces:

    # SendDelay is a short timer that will be triggered when a trace is complete.
    # Refinery will wait this duration before actually sending the trace.  The
    # reason for this short delay is to allow for small network delays or clock
    # jitters to elapse and any final spans to arrive before actually sending the
    # trace. Set to 0 for immediate sends.
    {{ formatExample "duration" "2s" }}
    {{ reload true }}
    {{ nonDefaultOnly .Data "SendDelay" "2s" }}

    # BatchTimeout dictates how frequently to send unfulfilled batches. By default
    # this will use the DefaultBatchTimeout in libhoney as its value, which is 100ms.
    {{ formatExample "duration" "1s" }}
    {{ reload true }}
    {{ nonDefaultOnly .Data "BatchTimeout" "1s" }}

    # TraceTimeout is a long timer; it represents the outside boundary of how long
    # to wait before sending an incomplete trace. Normally traces are sent when the
    # root span arrives. Sometimes the root span never arrives (due to crashes or
    # whatever), and this timer will send a trace even without having received the
    # root span. If you have particularly long-lived traces you should increase this
    # timer. Note that this will also increase the memory requirements for refinery.
    {{ formatExample "duration" "60s" }}
    {{ reload true }}
    {{ nonDefaultOnly .Data "TraceTimeout" "60s" }}

    # MaxBatchSize is the maximum number of events to be included in each batch for sending.
    {{ nonDefaultOnly .Data "MaxBatchSize" 500 }}

    # SendTicker is a short timer; it determines the duration to use to check for traces to send.
    {{ nonDefaultOnly .Data "SendTicker" "100ms" }}

{{ box "Debugging" }}
# This section contains configuration mainly used when debugging Refinery.
Debugging:

    # LoggingLevel is the level above which we should log. Debug is very verbose,
    # and should only be used in pre-production environments. Info is the
    # recommended level.
    # Valid options are "debug", "info", "error", and "panic".
    {{ reload false }}
    {{ nonDefaultOnly .Data "LoggingLevel" "debug" }}

    # DebugServiceAddr sets the IP and port the debug service will run on.
    # The debug service will only run if the command line flag -d is specified.
    # The debug service runs on the first open port between localhost:6060 and :6069 by default.
    {{ reload false }}
    {{ nonDefaultOnly .Data "DebugServiceAddr" "localhost:6060" }}

    # QueryAuthToken, if specified, provides a token that must be specified with
    # the header "X-Honeycomb-Refinery-Query" in order for a /query request to succeed.
    # These /query requests are intended for debugging refinery installations and
    # are not typically needed in normal operation.
    {{ envvar "REFINERY_QUERY_AUTH_TOKEN" }}
    # If not specified, the /query endpoints are inaccessible.
    {{ reload false }}
    {{ nonEmptyString .Data "QueryAuthToken" "some-private-value" }}

    # AddRuleReasonToTrace causes traces that are sent to Honeycomb to include the field `meta.refinery.reason`.
    # This field contains text indicating which rule was evaluated that caused the trace to be included.
    # Default is true.
    {{ reload true }}
    {{ nonDefaultOnly .Data "AddRuleReasonToTrace" true }}

    # AdditionalErrorFields should be a list of span fields that should be included when logging
    # errors that happen during ingestion of events (for example, the span too large error).
    # This is primarily useful in trying to track down misbehaving senders in a large installation.
    # The fields `dataset`, `apihost`, and `environment` are always included.
    # If a field is not present in the span, it will not be present in the error log.
    # Default is ["trace.span_id"].
    {{ reload true }}
    {{ stringArray .Data "AdditionalErrorFields" 6 "trace.span_id" }}

    # AddSpanCountToRoot adds a new metadata field, `meta.span_count` to root spans to indicate
    # the number of child spans on the trace at the time the sampling decision was made.
    # This value is available to the rules-based sampler, making it possible to write rules that
    # are dependent upon the number of spans in the trace.
    # Default is true.
    {{ reload true }}
    {{ nonDefaultOnly .Data "AddSpanCountToRoot" true }}


{{ box "Specialized" }}
# This section contains special-purpose configuration items that most users will not need to adjust.
Specialized:

    # EnvironmentCacheTTL is the duration used to retain cache entries that associate
    # an API key with an environment name.
    # A cache miss looks up the environment name using the HoneycombAPI config value.
    {{ formatExample "duration" "1h" }}
    {{ reload false }}
    {{ nonDefaultOnly .Data "EnvironmentCacheTTL" "1h" }}


ThingsIHaveNotDoneYet:
    # UpstreamBufferSize and PeerBufferSize control how large of an event queue to use
    # when buffering events that will be forwarded to peers or the upstream API.
    UpstreamBufferSize = 10000
    PeerBufferSize = 10000

